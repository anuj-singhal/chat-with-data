{
  "queries": [
    {
      "id": "q_001",
      "natural_language": "Show yearly profits for all banks in 2024",
      "variations": [
        "Display 2024 annual profits for banks",
        "Get yearly profit data for all banks in 2024",
        "What were the profits of all banks in 2024?",
        "List annual profits for each bank in 2024",
        "Show me 2024 bank profits",
        "Bank profitability for year 2024"
      ],
      "sql_query": "SELECT \n    b.BANK_NAME,\n    fp.YEAR,\n    SUM(fp.NET_PROFIT) as TOTAL_PROFIT,\n    AVG(fp.ROE) as AVG_ROE,\n    AVG(fp.ROA) as AVG_ROA\nFROM FINANCIAL_PERFORMANCE fp\nJOIN BANKS b ON fp.BANK_ID = b.BANK_ID\nWHERE fp.YEAR = 2024\nGROUP BY b.BANK_NAME, fp.YEAR\nORDER BY TOTAL_PROFIT DESC",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-01-20T09:15:00.000000"
    },
    {
      "id": "q_002",
      "natural_language": "Compare NIM trends across banks for 2023-2024",
      "variations": [
        "Show NIM comparison between banks for 2023 and 2024",
        "Net Interest Margin trends for all banks 2023-2024",
        "NIM trend analysis across banks for 2023-2024 period"
      ],
      "sql_query": "WITH nim_data AS (\n    SELECT \n        b.BANK_NAME,\n        fp.YEAR,\n        fp.QUARTER,\n        fp.NIM,\n        AVG(fp.NIM) OVER (PARTITION BY b.BANK_NAME, fp.YEAR) as YEARLY_AVG_NIM\n    FROM FINANCIAL_PERFORMANCE fp\n    JOIN BANKS b ON fp.BANK_ID = b.BANK_ID\n    WHERE fp.YEAR IN (2023, 2024)\n),\nyearly_comparison AS (\n    SELECT \n        BANK_NAME,\n        MAX(CASE WHEN YEAR = 2023 THEN YEARLY_AVG_NIM END) as NIM_2023,\n        MAX(CASE WHEN YEAR = 2024 THEN YEARLY_AVG_NIM END) as NIM_2024,\n        (MAX(CASE WHEN YEAR = 2024 THEN YEARLY_AVG_NIM END) - \n         MAX(CASE WHEN YEAR = 2023 THEN YEARLY_AVG_NIM END)) as NIM_CHANGE\n    FROM nim_data\n    GROUP BY BANK_NAME\n)\nSELECT \n    BANK_NAME,\n    ROUND(NIM_2023, 2) as NIM_2023,\n    ROUND(NIM_2024, 2) as NIM_2024,\n    ROUND(NIM_CHANGE, 2) as CHANGE,\n    ROUND((NIM_CHANGE / NIM_2023) * 100, 2) as CHANGE_PCT\nFROM yearly_comparison\nORDER BY NIM_CHANGE DESC",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 95,
        "completeness": 100
      },
      "overall_confidence": 98,
      "last_used": "2025-01-19T14:30:00.000000"
    },
    {
      "id": "q_003",
      "natural_language": "Compare deposit growth between Mashreq and ADCB for 2023",
      "variations": [
        "Show deposit changes for Mashreq vs ADCB in 2023",
        "How did Mashreq and ADCB deposits grow in 2023?",
        "Analyze deposit trends for Mashreq compared to ADCB for 2023",
        "Compare deposits for Mashreq and ADCB in 2023",
        "Mashreq vs ADCB deposit growth analysis 2023",
        "Get 2023 deposit comparison between Mashreq and ADCB"
      ],
      "sql_query": "WITH deposit_data AS (\n  SELECT \n    b.BANK_NAME,\n    fp.QUARTER,\n    fp.YEAR,\n    fp.TOTAL_DEPOSITS,\n    LAG(fp.TOTAL_DEPOSITS) OVER (PARTITION BY b.BANK_NAME ORDER BY fp.YEAR, fp.QUARTER) as prev_deposits\n  FROM FINANCIAL_PERFORMANCE fp\n  JOIN BANKS b ON fp.BANK_ID = b.BANK_ID\n  WHERE b.BANK_NAME IN ('Mashreq', 'ADCB') AND fp.YEAR = 2023\n)\nSELECT \n  BANK_NAME,\n  QUARTER,\n  TOTAL_DEPOSITS,\n  ROUND((TOTAL_DEPOSITS - prev_deposits) / prev_deposits * 100, 2) as growth_pct\nFROM deposit_data\nORDER BY BANK_NAME, QUARTER",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 95,
        "completeness": 100
      },
      "overall_confidence": 98,
      "last_used": "2025-01-18T11:22:10.123456"
    },
    {
      "id": "q_004",
      "natural_language": "Show top 5 banks by market capitalization",
      "variations": [
        "List top 5 banks by market cap",
        "Which are the 5 largest banks by market value?",
        "Get top 5 banks ranked by market capitalization",
        "Display 5 biggest banks by market cap",
        "Show me the top 5 banks by market value",
        "5 largest banks by market capitalization"
      ],
      "sql_query": "SELECT \n    b.BANK_NAME,\n    md.MARKET_CAP,\n    md.SHARE_PRICE,\n    md.PE_RATIO,\n    md.PRICE_TO_BOOK\nFROM MARKET_DATA md\nJOIN BANKS b ON md.BANK_ID = b.BANK_ID\nWHERE md.DATE = (SELECT MAX(DATE) FROM MARKET_DATA)\nORDER BY md.MARKET_CAP DESC\nLIMIT 5",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-01-17T16:45:00.000000"
    },
    {
      "id": "q_005",
      "natural_language": "Calculate average CASA ratio for Q4 2023",
      "variations": [
        "What was the average CASA ratio in Q4 2023?",
        "Get mean CASA ratio for fourth quarter 2023",
        "Average CASA for all banks Q4 2023",
        "Show average CASA ratio in Q4 of 2023",
        "Calculate mean CASA ratio for Q4 2023"
      ],
      "sql_query": "SELECT \n    ROUND(AVG(fp.CASA_RATIO), 2) as AVG_CASA_RATIO,\n    COUNT(DISTINCT b.BANK_ID) as NUM_BANKS,\n    MIN(fp.CASA_RATIO) as MIN_CASA,\n    MAX(fp.CASA_RATIO) as MAX_CASA\nFROM FINANCIAL_PERFORMANCE fp\nJOIN BANKS b ON fp.BANK_ID = b.BANK_ID\nWHERE fp.YEAR = 2023 AND fp.QUARTER = 4",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 95
      },
      "overall_confidence": 98,
      "last_used": "2025-01-16T10:30:00.000000"
    },
    {
      "id": "q_006",
      "natural_language": "Show quarterly revenue trend for FAB in 2023",
      "variations": [
        "FAB quarterly revenue for 2023",
        "Display FAB revenue by quarter in 2023",
        "Get quarterly revenue trends for FAB in 2023",
        "Show FAB's revenue each quarter of 2023",
        "FAB 2023 quarterly revenue progression"
      ],
      "sql_query": "SELECT \n    b.BANK_NAME,\n    fp.QUARTER,\n    fp.YEAR,\n    fp.TOTAL_REVENUE,\n    fp.NET_INTEREST_INCOME,\n    fp.NON_INTEREST_INCOME,\n    ROUND(((fp.TOTAL_REVENUE - LAG(fp.TOTAL_REVENUE) OVER (ORDER BY fp.QUARTER)) / \n           LAG(fp.TOTAL_REVENUE) OVER (ORDER BY fp.QUARTER)) * 100, 2) as QOQ_GROWTH\nFROM FINANCIAL_PERFORMANCE fp\nJOIN BANKS b ON fp.BANK_ID = b.BANK_ID\nWHERE b.BANK_NAME = 'FAB' AND fp.YEAR = 2023\nORDER BY fp.QUARTER",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-01-15T15:20:00.000000"
    },
    {
      "id": "q_007",
      "natural_language": "Compare ROE and ROA for all banks in latest quarter",
      "variations": [
        "Show ROE vs ROA for banks in most recent quarter",
        "Compare return on equity and assets for all banks latest quarter",
        "Get ROE and ROA comparison for banks in latest quarter",
        "Display ROE and ROA metrics for all banks recent quarter",
        "Latest quarter ROE ROA comparison across banks"
      ],
      "sql_query": "WITH latest_quarter AS (\n    SELECT MAX(YEAR) as max_year, MAX(QUARTER) as max_quarter\n    FROM FINANCIAL_PERFORMANCE\n    WHERE YEAR = (SELECT MAX(YEAR) FROM FINANCIAL_PERFORMANCE)\n)\nSELECT \n    b.BANK_NAME,\n    fp.ROE,\n    fp.ROA,\n    ROUND(fp.ROE / fp.ROA, 2) as LEVERAGE_RATIO,\n    fp.QUARTER,\n    fp.YEAR\nFROM FINANCIAL_PERFORMANCE fp\nJOIN BANKS b ON fp.BANK_ID = b.BANK_ID\nJOIN latest_quarter lq ON fp.YEAR = lq.max_year AND fp.QUARTER = lq.max_quarter\nORDER BY fp.ROE DESC",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 95,
        "completeness": 100
      },
      "overall_confidence": 98,
      "last_used": "2025-01-14T09:00:00.000000"
    },
    {
      "id": "q_008",
      "natural_language": "Find banks with CET1 ratio below 12%",
      "variations": [
        "Which banks have CET1 less than 12%?",
        "Show banks where CET1 ratio is under 12",
        "List banks with capital ratio below 12%",
        "Get banks with CET1 lower than 12 percent",
        "Banks with Common Equity Tier 1 below 12%"
      ],
      "sql_query": "SELECT DISTINCT\n    b.BANK_NAME,\n    fp.CET1,\n    fp.QUARTER,\n    fp.YEAR,\n    CASE \n        WHEN fp.CET1 < 10 THEN 'Critical'\n        WHEN fp.CET1 < 11 THEN 'Low'\n        ELSE 'Below Target'\n    END as RISK_LEVEL\nFROM FINANCIAL_PERFORMANCE fp\nJOIN BANKS b ON fp.BANK_ID = b.BANK_ID\nWHERE fp.CET1 < 12\n    AND fp.YEAR = (SELECT MAX(YEAR) FROM FINANCIAL_PERFORMANCE)\n    AND fp.QUARTER = (SELECT MAX(QUARTER) FROM FINANCIAL_PERFORMANCE WHERE YEAR = (SELECT MAX(YEAR) FROM FINANCIAL_PERFORMANCE))\nORDER BY fp.CET1 ASC",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-01-13T14:15:00.000000"
    },
    {
      "id": "q_009",
      "natural_language": "Get profit figures for banks in 2024",
      "variations": [],
      "sql_query": "SELECT \n    b.BANK_ID,\n    b.BANK_NAME,\n    SUM(fp.YTD_INCOME) AS TOTAL_YTD_INCOME\nFROM \n    FINANCIAL_PERFORMANCE fp\nJOIN \n    BANKS b ON fp.BANK_ID = b.BANK_ID\nWHERE \n    fp.YEAR = 2024\nGROUP BY \n    b.BANK_ID, b.BANK_NAME\nORDER BY \n    TOTAL_YTD_INCOME DESC;\n",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-10-26T15:45:22.946100"
    },
    {
      "id": "q_010",
      "natural_language": "Show net profit for all banks in 2024",
      "variations": [],
      "sql_query": "SELECT \n    b.BANK_ID,\n    b.BANK_NAME,\n    COALESCE(SUM(fp.YTD_INCOME), 0) AS NET_PROFIT\nFROM \n    BANKS b\nLEFT JOIN \n    FINANCIAL_PERFORMANCE fp ON b.BANK_ID = fp.BANK_ID AND fp.YEAR = 2024\nGROUP BY \n    b.BANK_ID, b.BANK_NAME\nORDER BY \n    b.BANK_NAME;\n",
      "validation_result": {
        "schema": 100,
        "syntax": 100,
        "semantic": 100,
        "completeness": 100
      },
      "overall_confidence": 100,
      "last_used": "2025-10-26T15:47:08.542191"
    }
  ]
}